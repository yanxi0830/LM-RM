from translate.pddl.custom_utils import parse_output_ipc

from pop_module.linearizer import linearize
from pop_module.lifter import lift_POP
import networkx as nx
import matplotlib.pyplot as plt
from pop_module.mip import encode_POP_v2
import argparse

parser = argparse.ArgumentParser(
    description='Generate a Reward Machine from high-level PDDL model using Partial-Ordered Plan'
)
parser.add_argument('--domain', type=str, help='domain.pddl')
parser.add_argument('--problem', type=str, help='problem.pddl')
parser.add_argument('--plan', type=str, help='plan generated by planner (see scripts/plan.sh)')
args = parser.parse_args()


def convert_pop_to_rm_network(pop):
    network = nx.DiGraph()

    plans = linearize(pop)

    for linear_plan in plans:
        for i, action in enumerate(linear_plan[:-1]):
            state = frozenset(linear_plan[:i + 1])
            if state not in network:
                network.add_node(state)
            # add the edge linking to next action
            if i != 0:
                prev_state = frozenset(linear_plan[:i])
                network.add_edge(prev_state, state, attr=action)

    nx.draw_networkx(network, pos=nx.shell_layout(network), with_labels=False)
    nx.draw_networkx_edge_labels(network, pos=nx.shell_layout(network))
    plt.savefig('rm.png')
    plt.show()

    return network


if __name__ == "__main__":
    domain_file = "../../domains/craft/domain.pddl"
    prob_file = "../../domains/craft/t9.pddl"
    plan_file = parse_output_ipc("../../domains/craft/t9.plan")

    if args.domain is not None and args.problem is not None and args.plan is not None:
        domain_file = args.domain
        prob_file = args.problem
        plan_file = parse_output_ipc(args.plan)

    pop = lift_POP(domain_file, prob_file, plan_file, True)
    popfile = "pop.txt"
    pop_good = encode_POP_v2(domain_file, prob_file, pop, None, popfile)

    print(pop_good.goal)

    convert_pop_to_rm_network(pop_good)
